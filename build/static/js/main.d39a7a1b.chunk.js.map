{"version":3,"sources":["BooksAPI.js","Book.js","Shelf.js","Search.js","Library.js","App.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","update","book","shelf","fetch","concat","id","method","Object","objectSpread","Content-Type","body","JSON","stringify","then","res","json","search","query","data","books","Book","getAuthors","_this","props","authors","map","au","slice","lastIndexOf","handleChange","selected","b","target","value","undefined","moveBook","addBookFromSearch","react_default","a","createElement","className","style","width","height","this","imageLinks","textAlign","src","thumbnail","onChange","defaultValue","disabled","title","length","React","Component","Shelf","name","shelfBooks","src_Book","key","Search","state","result","notFound","execute","_callee","eve","found","regenerator_default","wrap","_context","prev","next","sent","existingBook","existingBooks","find","setState","stop","_this2","react_router_dom","to","type","placeholder","changeAPI","cameFromSearch","fontSize","Library","currentlyReading","wantToRead","read","getHeader","header","src_Shelf","BooksApp","setShelves","filter","toConsumableArray","alert","BooksAPI","react_router","exact","path","render","src_Library","src_Search","ReactDOM","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.d39a7a1b.chunk.js","sourcesContent":["\nconst api = \"https://reactnd-books-api.udacity.com\"\n\n\n// Generate a unique token for storing your bookshelf data on the backend server.\nlet token = localStorage.token\nif (!token)\n  token = localStorage.token = Math.random().toString(36).substr(-8)\n\nconst headers = {\n  'Accept': 'application/json',\n  'Authorization': token\n}\n\nexport const get = (bookId) =>\n  fetch(`${api}/books/${bookId}`, { headers })\n    .then(res => res.json())\n    .then(data => data.book)\n\nexport const getAll = () =>\n  fetch(`${api}/books`, { headers })\n    .then(res => res.json())\n    .then(data => data.books)\n\nexport const update = (book, shelf) =>\n  fetch(`${api}/books/${book.id}`, {\n    method: 'PUT',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ shelf })\n  }).then(res => res.json())\n\nexport const search = (query) =>\n  fetch(`${api}/search`, {\n    method: 'POST',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ query })\n  }).then(res => res.json())\n    .then(data => data.books)\n","import React from 'react'\r\nimport './App.css'\r\nclass Book extends React.Component{\r\n    //note that there is no need to use state for this component because all\r\n    //data are passed and used directly through the props (from the books component)\r\n    \r\n    //getAuthors: if there is more than 1 author for a book, this function\r\n    //returns all authors followed by ',' except the last author\r\n    getAuthors = () => `${this.props.book.authors.map( au => \r\n                                `${au}, `)}`.slice(0, `${this.props.book.authors.map( au => \r\n                                    `${au}, `)}`.lastIndexOf(\",\"));\r\n    handleChange = (selected) => {\r\n        //get the changed book:\r\n        let b= this.props.book;\r\n        //change the changed book shelf to the chosen shelf: \r\n        b.shelf = selected.target.value;\r\n        //if changing the book shelf happend to a book in the search results:\r\n        if(this.props.moveBook === undefined){\r\n            this.props.addBookFromSearch(b)\r\n        }\r\n        //else if changing the book shelf happend in the library books \r\n        else \r\n        this.props.moveBook(b);\r\n    }\r\n        \r\n    render(){\r\n        return(\r\n            <li> \r\n                <div className=\"book\">\r\n                    <div className=\"book-top\">\r\n                            <div className=\"book-cover\" style={{width: 128, height: 193}}>\r\n                                {\r\n                                /*if the book doesn't have picture property in the server,\r\n                                show \"N/A\", else if image exists, show the image*/\r\n                                this.props.book.imageLinks === undefined ? \r\n                                \r\n                                <p style = {{textAlign:\"center\"}}>N/A</p>\r\n                                :\r\n                                <img src = {`${this.props.book.imageLinks.thumbnail}`} style ={{width:'100%', height:'100%'}} />\r\n                                }\r\n                            </div>\r\n                            <div className=\"book-shelf-changer\">\r\n                              <select onChange={this.handleChange} \r\n                              defaultValue={ //default value equal the book's shelf\r\n                                  this.props.book.shelf}>\r\n                                <option value=\"move\" disabled>Move to...</option>        \r\n                                <option value=\"currentlyReading\">Currently Reading</option>\r\n                                <option value=\"wantToRead\">Want to Read</option>\r\n                                <option value=\"read\">Read</option>\r\n                                <option value=\"none\">None</option>\r\n                              </select>\r\n                            </div>\r\n                          </div>\r\n                          <div className=\"book-title\"></div>\r\n                          <div className=\"book-title\">{this.props.book.title}</div>\r\n                          <div className=\"book-authors\">{\r\n                              //if the book doesn't have authors in the server:\r\n                             this.props.book.authors === undefined ? \"no authors\"\r\n                             : //if there is authors, check if there is more than one:\r\n                            (this.props.book.authors.length === 1 ? \r\n                            this.props.book.authors[0] : this.getAuthors()) //get all authors for this book\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </li>\r\n        )\r\n    }\r\n}\r\nexport default Book","import React from 'react'\r\nimport Book from './Book'\r\nclass Shelf extends React.Component{\r\n    //note that there is no need to use state for this component because all \r\n    //data are passed and used directly through the props (from the books component)\r\n    render(){\r\n        return(\r\n            <div className=\"bookshelf\">\r\n                  <h2 className=\"bookshelf-title\">{this.props.name}</h2>\r\n                  <div className=\"bookshelf-books\">\r\n                    <ol className=\"books-grid\">\r\n                      {this.props.shelfBooks!==undefined?this.props.shelfBooks.map(book =>\r\n                         <Book \r\n                         key={book.id} \r\n                         book = {book}  \r\n                         moveBook = {this.props.moveBook}/>):false}\r\n                    </ol>\r\n                  </div>\r\n                </div>\r\n        )\r\n    }\r\n}\r\nexport default Shelf;","import React from 'react'\r\nimport {Link} from 'react-router-dom'\r\nimport {search} from './BooksAPI'\r\nimport Book from './Book'\r\nclass Search extends React.Component{\r\n    state = {\r\n        result:[],\r\n        notFound:\"'Android', 'Art', 'Artificial Intelligence', 'Astronomy', 'Austen', 'Baseball', 'Basketball', 'Bhagat', 'Biography', 'Brief', 'Business', 'Camus', 'Cervantes', 'Christie', 'Classics', 'Comics', 'Cook', 'Cricket', 'Cycling', 'Desai', 'Design', 'Development', 'Digital Marketing', 'Drama', 'Drawing', 'Dumas', 'Education', 'Everything', 'Fantasy', 'Film', 'Finance', 'First', 'Fitness', 'Football', 'Future', 'Games', 'Gandhi', 'Homer', 'Horror', 'Hugo', 'Ibsen', 'Journey', 'Kafka', 'King', 'Lahiri', 'Larsson', 'Learn', 'Literary Fiction', 'Make', 'Manage', 'Marquez', 'Money', 'Mystery', 'Negotiate', 'Painting', 'Philosophy', 'Photography', 'Poetry', 'Production', 'Programming', 'React', 'Redux', 'River', 'Robotics', 'Rowling', 'Satire', 'Science Fiction', 'Shakespeare', 'Singh', 'Swimming', 'Tale', 'Thrun', 'Time', 'Tolstoy', 'Travel', 'Ultimate', 'Virtual Reality', 'Web Development', 'iOS'\"\r\n    }\r\n    execute = async (eve) => {\r\n        let found = await search(eve.target.value);\r\n        if(found !== undefined && found.length > 0){\r\n            //if a book from the search exists in our library, return the existing\r\n            //version (to display that it's in our shelves):\r\n            found = found.map(\r\n                book=>{\r\n                    book.shelf='none';\r\n                    //find an existing book with same id as the new found one\r\n                    let existingBook =\r\n                    this.props.existingBooks.find(b => b.id === book.id)\r\n                    //if found an old book, merge between two books, but override the \r\n                    //book in search with the book in library\r\n                    return existingBook ? {...book, ...existingBook} : book;\r\n                }\r\n            )\r\n            this.setState({result:found})\r\n        }\r\n    }\r\n    render(){\r\n        return(\r\n            <div className=\"search-books\">  \r\n            <div className=\"search-books-bar\">\r\n              <Link className=\"close-search\" to={'/'}>Close</Link>\r\n              <div className=\"search-books-input-wrapper\">\r\n                {\r\n                /*\r\n                  NOTES: The search from BooksAPI is limited to a particular set of search terms.\r\n                  You can find these search terms here:\r\n                  https://github.com/udacity/reactnd-project-myreads-starter/blob/master/SEARCH_TERMS.md\r\n\r\n                  However, remember that the BooksAPI.search method DOES search by title or author. So, don't worry if\r\n                  you don't find a specific author or title. Every search is limited by search terms.\r\n                */}\r\n                <input type=\"text\" placeholder=\"Search by title or author\" onChange={this.execute}/>\r\n\r\n              </div>\r\n            </div>\r\n            <div className=\"search-books-results\">\r\n              <ol className=\"books-grid\">\r\n                  \r\n                {\r\n                    this.state.result.length > 0?\r\n                this.state.result.map( b => <Book \r\n                                    key = {b.id} \r\n                                    book = {b} \r\n                                    addBookFromSearch={this.props.addBookFromSearch}\r\n                                    changeAPI={this.props.changeAPI}\r\n                                    cameFromSearch={true}\r\n                                    />) \r\n                :\r\n                 <p style={{fontSize:\"0.9em\"}}>categories:<br/>{this.state.notFound}</p>\r\n                }\r\n              </ol>\r\n            </div>\r\n          </div>\r\n        )\r\n    }\r\n}\r\nexport default Search","import React from 'react'\r\nimport * as BooksAPI from './BooksAPI'\r\nimport './App.css'\r\nimport Shelf from './Shelf'\r\nimport Search from './Search'\r\nimport {Link, Route} from 'react-router-dom'\r\nclass Library extends React.Component {\r\n    state = {\r\n        books:[],\r\n        currentlyReading:[],\r\n        wantToRead:[],\r\n        read:[]\r\n    }\r\n    getHeader = () => {\r\n      //if the books did not load yet, show loading header:\r\n        return this.props.books.length === 0 ? \"loading\" : \"MyBooks\"\r\n    }\r\n   \r\n    render() {\r\n         let header = this.getHeader();\r\n        return (\r\n          <div className=\"list-books\"> \r\n          <div className=\"list-books-title\">  \r\n          <h1>{header}</h1>\r\n          </div>\r\n          <div className=\"list-books-content\">\r\n\r\n            <Shelf name = \"Currently Reading\" shelfBooks = {this.props.currentlyReading} moveBook = {this.props.moveBook}/>\r\n            <Shelf name = \"Want To Read\" shelfBooks = {this.props.wantToRead} moveBook = {this.props.moveBook} />\r\n            <Shelf name = \"Read\" shelfBooks = {this.props.read} moveBook = {this.props.moveBook} />\r\n          </div>\r\n          <Link to={'/search'} className=\"open-search\"><button>Add a book</button></Link>\r\n\r\n          </div>\r\n        )\r\n      }\r\n}\r\n\r\nexport default Library","import React from 'react'\nimport * as BooksAPI from './BooksAPI'\nimport './App.css'\nimport Library from './Library'\nimport Search from './Search'\nimport {Route, Switch} from 'react-router-dom'\nclass BooksApp extends React.Component {\n  state={\n    books:[],\n    currentlyReading:[],\n    wantToRead:[],\n    read:[]\n  }\n  setShelves = (books) =>{\n    const currentlyReading = books.filter(b => b.shelf === \"currentlyReading\")\n    const wantToRead = books.filter(b => b.shelf === \"wantToRead\")\n    const read = books.filter(b => b.shelf === \"read\")\n    this.setState({\n      books:books,\n      currentlyReading:currentlyReading,\n      wantToRead:wantToRead,\n      read:read\n    })\n  }\n  async componentDidMount(){\n    try{\n      const books = await BooksAPI.getAll(); //get books that exists in our library\n      this.setShelves(books) //set the shelves as catogories\n    }\n    catch(error){\n      alert(\"Bad Network Connection, refresh the page\")\n    }\n  }\n  async changeAPI(book){ //update the book shelf in the server\n      await  BooksAPI.update(book, book.shelf)\n  }\n  moveBook = (book) => { //used inside book to change it's\n    //shelf (in the the library books, not in the search books)\n      \n    this.changeAPI(book)//change shelf in the server\n     //create array returns all old existing books, but replace the changed book with\n          //a new object with different chosen shelf\n    const books = this.state.books.map(b => b.id === book.id \n          ? book : b);\n      \n      //set the shelves again to move the book (setShelves contains setState, so\n      //the page will re-render again after re-organizing shelves)\n      this.setShelves(books); \n  }\n  addBookFromSearch =(b) =>{//will handle changing a book's options in the search results\n    \n    this.changeAPI(b) //change the books shelf in the books server\n    \n    /*if the changed book (from search) was existing in our library,\n    then it will be removed from our library, then added again (to handle shelf changing):*/\n    let books = this.state.books.filter(book => book.id !== b.id ? book : b);\n    books = [...books, b];\n    //categorize and re-render the page again:\n    this.setShelves(books)\n\n  }\n  render() {\n    return (\n        <div className=\"app\">\n            <Switch>\n                <Route exact path={'/'} render={\n                  ()=><Library books = {this.state.books} \n                  currentlyReading={this.state.currentlyReading}\n                  wantToRead={this.state.wantToRead}\n                  read={this.state.read}\n                  moveBook={this.moveBook}\n                  />\n                }/>\n                <Route exact path={'/Search'} render={\n                  ()=><Search\n                  existingBooks={this.state.books}\n                  addBookFromSearch={this.addBookFromSearch}\n                  changeAPI={this.changeAPI}\n                  moveBook={this.moveBook}\n                  />\n                }/>\n            </Switch>\n          </div>\n      \n    )\n  }\n}\n\nexport default BooksApp","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport {BrowserRouter} from 'react-router-dom'\nimport './index.css'\nReactDOM.render(\n    <BrowserRouter><App /></BrowserRouter>,\n    document.getElementById('root')\n  );"],"sourceRoot":""}